#![allow(unused_imports)]
#![allow(path_statements)]
#![allow(unused_variables)]
#![allow(unused_mut)]
#![allow(unused_must_use)]

use std::path::PathBuf;  // 拼接路径
use std::fs;  // 获取目录
// use std::io;
use std::collections::HashSet;  // 去重
// 写数据
use std::fs::OpenOptions;
use std::io::Write;
// 读数据
use std::fs::File;
use std::io::{self, BufRead, BufReader};
use std::path::Path;
// 键值对
use std::collections::HashMap;

// 定义词性标签

/*
https://www.filepicker.io/api/file/BX9fr87TTu3wtPRRbVLQ
https://github.com/thunlp/THULAC-Python
https://github.com/ibeatai/beat-ai
1 手动分隔
2 同义词替换  新建,建立,创建-->新建
3 满足特征链 就返回
*/



// 假设的词性标注
fn get_pos_tags(sentence: &str) -> Vec<(&str, &str)> {
    // 这里应该是调用真实的词性标注器，我们假设返回每个单词及其标签
    vec![
        ("新建", "Verb"),
        ("一个", "Determiner"),
        ("结构体", "Noun"),
        // ... 其他单词和标签
    ]
}

// 寻找动词后面的名词
fn find_nouns_after_verbs(sentence: &str) -> Vec<String> {
    let pos_tags = get_pos_tags(sentence);
    let mut nouns_after_verbs = Vec::new();
    
    // 使用一个标志来记录是否刚刚遇到了一个动词
    let mut after_verb = false;
    
    for (word, tag) in pos_tags {
        if after_verb && tag == "Noun" {
            nouns_after_verbs.push(word.to_string());
        }
        println!("{:?},{:?}", word,tag);
        // after_verb = tag == "Verb";
        if tag == "Verb"{
            after_verb=true;
        }
    }
    
    nouns_after_verbs
}

fn main() {
    let sentence = "新建一个结构体";
    let nouns = find_nouns_after_verbs(sentence);
    println!("动词后面的名词: {:?}", nouns);
}


/*
"新建","Verb"
"一个","Determiner"       
"结构体","Noun"
动词后面的名词: ["结构体"]
*/
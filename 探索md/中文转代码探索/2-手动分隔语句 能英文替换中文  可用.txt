#![allow(unused_imports)]
#![allow(path_statements)]
#![allow(unused_variables)]
#![allow(unused_mut)]
#![allow(unused_must_use)]

use std::path::PathBuf;  // 拼接路径
use std::fs;  // 获取目录
// use std::io;
use std::collections::HashSet;  // 去重
// 写数据
use std::fs::OpenOptions;
use std::io::Write;
// 读数据
use std::fs::File;
use std::io::{self, BufRead, BufReader};
use std::path::Path;

use std::collections::HashMap;

fn translate_to_code(command: &str) -> String {
    let mut translation_map = HashMap::new();
    translation_map.insert("新建", "new");
    translation_map.insert("结构体", "struct");
    //translation_map.insert("一个", "a"); // 添加了对"一个"的翻译

    let words: Vec<&str> = command.split(' ').collect();
    let mut translated_words = Vec::new();
    for word in words {
        if let Some(&translation) = translation_map.get(word) {
            translated_words.push(translation);
        } else {
            translated_words.push(word); // 对于没有翻译的词，直接使用原词
        }
    }
    translated_words.join(" ")
}
fn main() {
    let command = "新建 一个 Orange 结构体";
    let code_description = translate_to_code(command);
    println!("{}", code_description); // 输出: new a Orange struct
}

/*
这是运行的结果
new 一个 Orange struct
手动分隔句子的情况下 是可以实现 英文替换中文 的  但是这个远远不够
我需要 分析出 Orange 是 struct的名字
其次 要分析出 这个自然语言的意图 是 创建结构体
*/